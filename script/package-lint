#!/bin/bash

# Package-lint script for greger package
# Runs package-lint on all relevant Emacs Lisp files

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Find package-lint - try common locations
PACKAGE_LINT_PATH=""
if [ -n "$CI" ]; then
    # In CI environment, package-lint is installed via package.el
    echo -e "${YELLOW}CI environment detected, using package.el to find package-lint${NC}"
else
    # Try to find package-lint in local .emacs.d
    for path in "$HOME/.emacs.d/elpa/package-lint-"*; do
        if [ -d "$path" ]; then
            PACKAGE_LINT_PATH="$path"
            break
        fi
    done

    if [ -z "$PACKAGE_LINT_PATH" ]; then
        echo -e "${RED}Error: package-lint not found in $HOME/.emacs.d/elpa/${NC}"
        echo "Please install package-lint with: M-x package-install RET package-lint RET"
        exit 1
    fi
    echo -e "${YELLOW}Found package-lint at: $PACKAGE_LINT_PATH${NC}"
fi

# Files to lint (exclude test files and debug files)
FILES_TO_LINT=(
    "greger.el"
    "greger-agent.el"
    "greger-parser.el"
    "greger-client.el"
    "greger-tools.el"
    "greger-stdlib.el"
    "greger-lib-lsp.el"
    "greger-web.el"
)

echo -e "${YELLOW}Running package-lint on greger package...${NC}"
echo

OVERALL_EXIT_CODE=0

for file in "${FILES_TO_LINT[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${YELLOW}Warning: $file not found, skipping${NC}"
        continue
    fi

    echo -e "Linting ${YELLOW}$file${NC}..."

    # Run package-lint on the file
    if [ -n "$CI" ]; then
        # In CI, use package.el to load package-lint
        EVAL_CODE="(progn
                     (setq debug-on-error t)
                     (require 'package)
                     (add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)
                     (package-initialize)
                     (add-to-list 'load-path \".\")
                     (require 'package-lint)
                     (find-file \"$file\")
                     (let ((results (package-lint-buffer)))
                       (if results
                           (progn
                             (dolist (result results)
                               (let ((line (nth 0 result))
                                     (col (nth 1 result))
                                     (type (nth 2 result))
                                     (msg (nth 3 result)))
                                 (princ (format \"%s:%d:%d: %s: %s\\n\" \"$file\" line col type msg))))
                             (kill-emacs 1))
                           (kill-emacs 0))))"
    else
        # Local environment, use found path
        EVAL_CODE="(progn
                     (setq debug-on-error t)
                     (package-initialize)
                     (add-to-list 'load-path \"$PACKAGE_LINT_PATH\")
                     (add-to-list 'load-path \".\")
                     (require 'package-lint)
                     (find-file \"$file\")
                     (let ((results (package-lint-buffer)))
                       (if results
                           (progn
                             (dolist (result results)
                               (let ((line (nth 0 result))
                                     (col (nth 1 result))
                                     (type (nth 2 result))
                                     (msg (nth 3 result)))
                                 (princ (format \"%s:%d:%d: %s: %s\\n\" \"$file\" line col type msg))))
                             (kill-emacs 1))
                           (kill-emacs 0))))"
    fi

    if emacs --batch -Q --eval "$EVAL_CODE" 2>/dev/null; then
        echo -e "  ${GREEN}✓ No issues found${NC}"
    else
        echo -e "  ${RED}✗ Issues found${NC}"
        OVERALL_EXIT_CODE=1
        # Re-run to show the actual issues
        if [ -n "$CI" ]; then
            ERROR_EVAL_CODE="(progn
                               (setq debug-on-error t)
                               (require 'package)
                               (add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)
                               (package-initialize)
                               (add-to-list 'load-path \".\")
                               (require 'package-lint)
                               (find-file \"$file\")
                               (let ((results (package-lint-buffer)))
                                 (dolist (result results)
                                   (let ((line (nth 0 result))
                                         (col (nth 1 result))
                                         (type (nth 2 result))
                                         (msg (nth 3 result)))
                                     (princ (format \"    %s:%d:%d: %s: %s\\n\" \"$file\" line col type msg))))))"
        else
            ERROR_EVAL_CODE="(progn
                               (setq debug-on-error t)
                               (package-initialize)
                               (add-to-list 'load-path \"$PACKAGE_LINT_PATH\")
                               (add-to-list 'load-path \".\")
                               (require 'package-lint)
                               (find-file \"$file\")
                               (let ((results (package-lint-buffer)))
                                 (dolist (result results)
                                   (let ((line (nth 0 result))
                                         (col (nth 1 result))
                                         (type (nth 2 result))
                                         (msg (nth 3 result)))
                                     (princ (format \"    %s:%d:%d: %s: %s\\n\" \"$file\" line col type msg))))))"
        fi
        emacs --batch -Q --eval "$ERROR_EVAL_CODE" 2>/dev/null
    fi
    echo
done

echo -e "${YELLOW}Package-lint complete!${NC}"

if [ $OVERALL_EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}No issues found in any files!${NC}"
else
    echo -e "${RED}Some files have issues that need to be fixed.${NC}"
fi

exit $OVERALL_EXIT_CODE
