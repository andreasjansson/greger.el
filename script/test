#!/bin/bash

# Test script for greger package
# Runs all ERT tests for the package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test files to run
TEST_FILES=(
    "test/test-greger.el"
    "test/test-greger-parser.el"
    "test/test-greger-stdlib.el"
    "test/test-greger-lib-lsp.el"
    "test/test-greger-tools.el"
    "test/test-greger-client.el"
    "test/test-end-to-end.el"
)

echo -e "${BLUE}Running ERT tests for greger package...${NC}"
echo

# Function to run tests for a single file
run_test_file() {
    local test_file="$1"
    echo -e "Running tests in ${YELLOW}$test_file${NC}..."

    if [ ! -f "$test_file" ]; then
        echo -e "  ${RED}✗ Test file not found: $test_file${NC}"
        return 1
    fi

    # Create temporary file to capture output
    local temp_output=$(mktemp)

    # Run the tests with ERT and capture all output
    if emacs --batch -Q \
        --eval "(progn
                  (setq debug-on-error t)
                  (add-to-list 'load-path \".\")
                  ;; Setup package archives and install dependencies if needed
                  (require 'package)
                  (setq package-archives '((\"melpa\" . \"https://melpa.org/packages/\")
                                           (\"gnu\" . \"https://elpa.gnu.org/packages/\")))
                  (package-initialize)
                  ;; Install lsp-mode and lsp-pyright if not available
                  (unless (package-installed-p 'lsp-mode)
                    (package-refresh-contents)
                    (package-install 'lsp-mode))
                  (unless (package-installed-p 'lsp-pyright)
                    (package-refresh-contents)
                    (package-install 'lsp-pyright))
                  ;; Load required packages
                  (require 'ert)
                  (require 'cl-lib)
                  ;; Load main greger files
                  (load-file \"greger.el\")
                  (load-file \"greger-parser.el\")
                  (load-file \"greger-stdlib.el\")
                  (load-file \"greger-lib-lsp.el\")
                  (load-file \"greger-tools.el\")
                  (load-file \"greger-client.el\")
                  (load-file \"greger-web.el\")
                  ;; Load test file
                  (load-file \"$test_file\")
                  ;; Run all tests defined in this file
                  (let ((ert-quiet nil))
                    (ert-run-tests-batch-and-exit t)))" > "$temp_output" 2>&1; then
        echo -e "  ${GREEN}✓ All tests passed${NC}"
        rm -f "$temp_output"
        return 0
    else
        echo -e "  ${RED}✗ Some tests failed${NC}"

        # Extract and display failure information
        echo -e "  ${RED}Failed tests:${NC}"

        # Extract failed test names from the summary at the end
        grep -E "^[[:space:]]*FAILED[[:space:]]+[a-zA-Z0-9_-]+" "$temp_output" | while IFS= read -r line; do
            test_name=$(echo "$line" | sed -E 's/^[[:space:]]*FAILED[[:space:]]+([a-zA-Z0-9_-]+).*/\1/')
            if [ -n "$test_name" ]; then
                echo -e "    ${RED}• $test_name${NC}"
            fi
        done

        # Show error details for each failed test
        echo -e "  ${RED}Error details:${NC}"

        # For each failed test, show the assertion that failed
        grep -E "^[[:space:]]*FAILED[[:space:]]+[a-zA-Z0-9_-]+" "$temp_output" | while IFS= read -r line; do
            test_name=$(echo "$line" | sed -E 's/^[[:space:]]*FAILED[[:space:]]+([a-zA-Z0-9_-]+).*/\1/')

            # Find the condition section for this test and extract the should statement
            awk "/Test $test_name condition:/,/Test.*condition:|^[[:space:]]*FAILED|^[[:space:]]*passed/" "$temp_output" | \
            grep -E "should" | head -1 | while IFS= read -r should_line; do
                clean_should=$(echo "$should_line" | sed 's/^[[:space:]]*//' | sed 's/)[[:space:]]*$//' | head -c 100)
                if [ -n "$clean_should" ]; then
                    echo -e "    ${YELLOW}$test_name: $clean_should${NC}"
                fi
            done
        done

        # If no detailed conditions found, show the FAILED lines with location info
        if ! grep -q "condition:" "$temp_output"; then
            grep -E "FAILED.*at.*\.el:" "$temp_output" | head -3 | while IFS= read -r line; do
                echo -e "    ${YELLOW}$line${NC}"
            done
        fi

        rm -f "$temp_output"
        return 1
    fi
}

# Function to run tests with verbose output
run_test_file_verbose() {
    local test_file="$1"
    echo -e "Running tests in ${YELLOW}$test_file${NC} (verbose mode)..."

    emacs --batch -Q \
        --eval "(progn
                  (setq debug-on-error t)
                  (add-to-list 'load-path \".\")
                  ;; Setup package archives and install dependencies if needed
                  (require 'package)
                  (setq package-archives '((\"melpa\" . \"https://melpa.org/packages/\")
                                           (\"gnu\" . \"https://elpa.gnu.org/packages/\")))
                  (package-initialize)
                  ;; Install lsp-mode and lsp-pyright if not available
                  (unless (package-installed-p 'lsp-mode)
                    (package-refresh-contents)
                    (package-install 'lsp-mode))
                  (unless (package-installed-p 'lsp-pyright)
                    (package-refresh-contents)
                    (package-install 'lsp-pyright))
                  ;; Load required packages
                  (require 'ert)
                  (require 'cl-lib)
                  ;; Load main greger files
                  (load-file \"greger.el\")
                  (load-file \"greger-parser.el\")
                  (load-file \"greger-stdlib.el\")
                  (load-file \"greger-lib-lsp.el\")
                  (load-file \"greger-tools.el\")
                  (load-file \"greger-client.el\")
                  (load-file \"greger-web.el\")
                  ;; Load test file
                  (load-file \"$test_file\")
                  ;; Run all tests defined in this file with verbose output
                  (let ((ert-quiet nil))
                    (ert-run-tests-batch-and-exit t)))"
}

# Parse command line arguments
VERBOSE=false
SPECIFIC_FILE=""
HELP=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -f|--file)
            SPECIFIC_FILE="$2"
            shift 2
            ;;
        -h|--help)
            HELP=true
            shift
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            HELP=true
            shift
            ;;
    esac
done

# Show help if requested
if [ "$HELP" = true ]; then
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -v, --verbose    Show verbose test output"
    echo "  -f, --file FILE  Run tests only for specific file"
    echo "  -h, --help       Show this help message"
    echo ""
    echo "Test files available:"
    for file in "${TEST_FILES[@]}"; do
        echo "  - $file"
    done
    exit 0
fi

# Run tests
OVERALL_EXIT_CODE=0
TOTAL_FILES=0
PASSED_FILES=0

if [ -n "$SPECIFIC_FILE" ]; then
    # Run tests for specific file
    TOTAL_FILES=1
    if [ "$VERBOSE" = true ]; then
        run_test_file_verbose "$SPECIFIC_FILE"
        OVERALL_EXIT_CODE=$?
    else
        if run_test_file "$SPECIFIC_FILE"; then
            PASSED_FILES=1
        else
            OVERALL_EXIT_CODE=1
        fi
    fi
else
    # Run tests for all files
    for test_file in "${TEST_FILES[@]}"; do
        TOTAL_FILES=$((TOTAL_FILES + 1))

        if [ "$VERBOSE" = true ]; then
            echo
            run_test_file_verbose "$test_file"
            if [ $? -ne 0 ]; then
                OVERALL_EXIT_CODE=1
            else
                PASSED_FILES=$((PASSED_FILES + 1))
            fi
        else
            if run_test_file "$test_file"; then
                PASSED_FILES=$((PASSED_FILES + 1))
            else
                OVERALL_EXIT_CODE=1
            fi
        fi
        echo
    done
fi

# Print summary
echo -e "${BLUE}Test Summary:${NC}"
echo -e "  Files run: $TOTAL_FILES"
echo -e "  Files passed: ${GREEN}$PASSED_FILES${NC}"
echo -e "  Files failed: ${RED}$((TOTAL_FILES - PASSED_FILES))${NC}"

if [ $OVERALL_EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}All tests passed!${NC}"
else
    echo -e "${RED}Some tests failed.${NC}"
fi

exit $OVERALL_EXIT_CODE
